#!/usr/bin/env python3
"""
An autogenerated testfile for python.
"""

import os
import sys
import unittest
from io import StringIO
from unittest import TextTestRunner
from unittest.mock import patch

from tester import (ExamTestCase, ExamTestResult, import_module,
                    setup_and_get_repo_path, tags)

FILE_DIR = os.path.dirname(os.path.realpath(__file__))
REPO_PATH = setup_and_get_repo_path(FILE_DIR)

# Path to file and basename of the file to import
main = import_module(REPO_PATH, 'main')
marvin1 = import_module(REPO_PATH, 'marvin1')

class Test1Marvin1Functions(ExamTestCase):
    """
    Each assignment has 1 testcase with multiple asserts.
    The different asserts https://docs.python.org/3.6/library/unittest.html#test-cases
    """

    def check_print_contain(self, inp, correct, func):
        """
        One function for testing print input functions.
        """
        with patch("builtins.input", side_effect=inp):
            with patch("sys.stdout", new=StringIO()) as fake_out:
                func()
                str_data = fake_out.getvalue()
                for val in correct:
                    self.assertIn(val, str_data)


    @tags("1", "marvin1")
    def test_greet(self):
        """
        Testar att funktionen "greet" finns i marvin1.py.
        Använder följande som input:
        {arguments}
        Förväntar att följande finns med i utskrift:
        {correct}
        Fick följande:
        {student}
        """
        self.norepr = True
        self._multi_arguments = ["dbwebb är bäst"]
        self.check_print_contain(self._multi_arguments, ["dbwebb är bäst"], marvin1.greet)


    @tags("2", "marvin1")
    def test_temperature_high(self):
        """
        Testar att funktionen "celsius_to_fahrenheit" finns i marvin1.py.
        Använder följande som input:
        {arguments}
        Förväntar att följande finns med i utskrift:
        {correct}
        Fick följande:
        {student}
        """
        self.norepr = True
        self._multi_arguments = ["70"]
        self.check_print_contain(self._multi_arguments, ["158.0"], marvin1.celsius_to_fahrenheit)



    @tags("3", "marvin1")
    def test_points_to_grade(self):
        """
        Testar att funktionen "points_to_grade" finns i marvin1.py.
        Använder följande som input:
        {arguments}
        Förväntar att följande finns med i utskrift:
        {correct}
        Fick följande:
        {student}
        """
        self.norepr = True
        self._multi_arguments = ["100", "59"]

        # If the studend does not include newlines in output.
        self.check_print_contain(self._multi_arguments, ["score: F"], marvin1.points_to_grade)


    @tags("4", "marvin1")
    def test_compare_numbers(self):
        """
        Testar att funktionen "compare_numbers" finns i marvin1.py.
        Använder följande som input:
        {arguments}
        Förväntar att följande finns med i utskrift:
        {correct}
        Fick följande:
        {student}
        """
        numbers = ["11", "12", "12", "12", "14"]

        self.norepr = True
        self._multi_arguments = [*numbers, "done"]

        self.check_print_contain(
            self._multi_arguments,
            ["larger!", "same!", "same!", "larger!"],
            marvin1.compare_numbers
        )



    @tags("5", "marvin1")
    def test_validate_ssn(self):
        """
        Testar att funktionen "validate_ssn" finns i marvin1.py.
        Använder följande som input:
        {arguments}
        Förväntar att följande finns med i utskrift:
        {correct}
        Fick följande:
        {student}
        """
        self.norepr = True
        self._multi_arguments = ["811218-9876"]

        self.check_print_contain(
            self._multi_arguments,
            ["Valid"],
            marvin1.validate_ssn
        )


    @tags("6", "marvin1")
    def test_robber_language(self):
        """
        Testar att funktionen "robber_language" finns mer i marvin1.py
        Använder följande som input:
        {arguments}
        Förväntar att följande finns med i utskrift:
        {correct}
        Fick följande:
        {student}
        """
        self.norepr = True
        self._multi_arguments = ["webbprogrammering"]

        self.check_print_contain(
            self._multi_arguments,
            ["wowebobbobpoprorogogroramommomerorinongog"],
            marvin1.robber_language
        )


    @tags("1", "2", "marvin1")
    def test_main(self):
        """
        Testar att anropa menyvalen 1 och 2 via main funktionen i main.py.
        Använder följande som input:
        {arguments}
        Förväntar att följande finns med i utskrift:
        {correct}
        Fick följande:
        {student}
        """
        self.norepr = True
        self._multi_arguments = ["1", "dbwebb är bäst", "", "2", "32", "", "q"]
        self.check_print_contain(self._multi_arguments, ["dbwebb är bäst", "89.6"], main.main)

if __name__ == '__main__':
    runner = TextTestRunner(resultclass=ExamTestResult, verbosity=2)
    unittest.main(testRunner=runner, exit=False)
