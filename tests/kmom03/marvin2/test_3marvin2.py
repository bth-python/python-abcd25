#!/usr/bin/env python3
"""
An autogenerated testfile for python.
"""

import inspect
import os
import re
import sys
import unittest
from io import StringIO
from unittest import TextTestRunner
from unittest.mock import patch

from tester import (ExamTestCase, ExamTestResult, import_module,
                    setup_and_get_repo_path, tags)

FILE_DIR = os.path.dirname(os.path.realpath(__file__))
REPO_PATH = setup_and_get_repo_path(FILE_DIR)

# Path to file and basename of the file to import
main = import_module(REPO_PATH, 'main')
marvin1 = import_module(REPO_PATH, 'marvin1')
marvin2 = import_module(REPO_PATH, 'marvin2')


class Test2Marvin2Functions(ExamTestCase):
    """
    Each assignment has 1 testcase with multiple asserts.
    The different asserts https://docs.python.org/3.6/library/unittest.html#test-cases
    """
    def check_print_contain(self, inp, correct, func):
        """
        One function for testing print input functions.
        """
        with patch("builtins.input", side_effect=inp):
            with patch("sys.stdout", new=StringIO()) as fake_out:
                func()
                str_data = fake_out.getvalue()
                for val in correct:
                    self.assertIn(val, str_data)



    def check_print_contain_new_error_text(self, inp, correct, func, new_text):
        """
        One function for testing print input functions.
        """
        with patch("builtins.input", side_effect=inp):
            with patch("sys.stdout", new=StringIO()) as fake_out:
                func()
                str_data = fake_out.getvalue()
                for val in correct:
                    self.assertIn(val, str_data, msg=new_text)


    @tags("7", "marvin2")
    def test_create_ssn_func(self):
        """
        Testar att anropa funktionen create_ssn i marvin2.py. Efter det anropas validate_ssn i marvin1.py för att validera personnummret.
        Använder följande som argument:
        {arguments}
        Förväntar att ett giltigt personnummer har rätt struktur:
        {correct}
        Det har inte strukturen, ÅÅMMDD-NNNN:
        {student}
        """
        birthdate = "920606"
        self._argument = birthdate
        str_data = marvin2.create_ssn(birthdate)

        pattern = r"920606-\d{4}$"
        self.fail_msg.student_answer = str_data
        self.fail_msg.correct_answer = repr(f"{birthdate}-NNNN")
        if str_data is None or re.match(pattern, str_data) is None:
            raise AssertionError

        self._argument = str_data
        self.check_print_contain_new_error_text(
            [self._argument],
            ["Valid"],
            marvin1.validate_ssn,
            [
                "Använder funktionen 'validate_ssn()' för att validera personnummret din create_ssn skapade:",
                "Personnummret var inte giltigt:"
            ]
        )



    @tags("7", "marvin2")
    def test_calculate_luhna_sum_3(self):
        """
        Testar att anropa funktionen calculate_luhna_sum i marvin2.py med personnummer utan sista siffra.
        Använder följande som argument:
        {arguments}
        Förväntar att följande summa returneras:
        {correct}
        Fick:
        {student}
        """
        ssn = "920606421"
        self._argument = ssn
        str_data = marvin2.calculate_luhna_sum(ssn)

        self.assertEqual(str_data, 35)



    @tags("7", "marvin2")
    def test_calculate_luhna_sum_4(self):
        """
        Testar att anropa funktionen calculate_luhna_sum i marvin2.py med personnummer med sista siffra.
        Använder följande som argument:
        {arguments}
        Förväntar att följande summa returneras:
        {correct}
        Fick:
        {student}
        """
        ssn = "031224152"
        self._argument = ssn
        str_data = marvin2.calculate_luhna_sum(ssn)

        self.assertEqual(str_data, 26)



    @tags("8", "marvin2")
    def test_randomize_string_func(self):
        """
        Testar att anropa funktionen randomize_string i marvin2.py.
        Använder följande som argument:
        {arguments}
        Förväntar att följande sträng returneras, fast med bokstäverna i annan ordning:
        {correct}
        Fick följande:
        {student}
        """
        string = "MedSiffror1234567890"
        self._argument = string

        str_data = marvin2.randomize_string(string)

        length = len(string)
        pattern = fr"([{string}]{{{length}}})"

        self.fail_msg.student_answer = str_data
        self.fail_msg.correct_answer = repr(f"<{string} i en slumpad ordning>")


        try:
            rnd_str = re.search(pattern, str_data)[1]
        except TypeError:
            raise AssertionError
        if string == rnd_str or sorted(string) != sorted(rnd_str):
            raise AssertionError



if __name__ == '__main__':
    runner = TextTestRunner(resultclass=ExamTestResult, verbosity=2)
    unittest.main(testRunner=runner, exit=False)
