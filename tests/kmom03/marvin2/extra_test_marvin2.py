#!/usr/bin/env python3
"""
An autogenerated testfile for python.
"""

import os
import random
import re
import sys
import unittest
from io import StringIO
from unittest import TextTestRunner
from unittest.mock import patch

from tester import (ExamTestCase, ExamTestResult, import_module,
                    setup_and_get_repo_path, tags)

FILE_DIR = os.path.dirname(os.path.realpath(__file__))
REPO_PATH = setup_and_get_repo_path(FILE_DIR)


# Path to file and basename of the file to import
main = import_module(REPO_PATH, 'main')
marvin2 = import_module(REPO_PATH, 'marvin2')



class Test3Marvin2Extra(ExamTestCase):
    """
    Each assignment has 1 testcase with multiple asserts.
    The different asserts https://docs.python.org/3.6/library/unittest.html#test-cases
    """

    link_to_assignment = "https://dbwebb.se/uppgift/din-egen-chattbot-marvin-steg-2-v4#extra"


    def check_print_contain(self, inp, correct, func):
        """
        One function for testing print input functions.
        """
        with patch("builtins.input", side_effect=inp):
            with patch("sys.stdout", new=StringIO()) as fake_out:
                func()
                str_data = fake_out.getvalue()
                for val in correct:
                    self.assertIn(val, str_data)

    @tags("b1")
    def test_has_strings_menu(self):
        """
        Testar att anropa menyval b1 via main funktionen i main.py.
        Använder följande som input:
        {arguments}
        Förväntar att följande sträng finns med i utskriften:
        {correct}
        Fick följande:
        {student}
        """
        self._multi_arguments = ["b1", "anagram", "ana", "agr", "am", "", "q"]
        self.norepr = True
        self.check_print_contain(self._multi_arguments, ["Match"], main.main)



    @tags("b1")
    def test_has_strings_func(self):
        """
        Testar att anropa has_strings i marvin2.py.
        Använder följande som argument:
        {arguments}
        Förväntar att följande sträng returneras:
        {correct}
        Fick följande:
        {student}
        """
        self._multi_arguments = ["Palindrom", "par", "ind", "rom" ]
        self.assertEqual(
            marvin2.has_strings(*self._multi_arguments),
            "No match" 
        )


    @tags("b2")
    def test_create_ssn_ext_func(self):
        """
        Testar att anropa create_ssn i marvin2.py med "M".
        Använder följande som argument:
        {arguments}
        Förväntar att följande sträng returneras:
        {correct}
        Fick följande:
        {student}
        """
        random.seed(2016)
        self._multi_arguments = ["000101", "M" ]
        ssn = marvin2.create_ssn(*self._multi_arguments)
        self.assertFalse(
            int(ssn[-2]) % 2 == 0,
            [
                f"Förväntar att tredje siffran i {ssn} är udda",
                "Den var jämn"
            ]
        )
        self.assertFalse(
            not ssn.startswith("000101"),
            [
                f"Förväntar att personnumret, {ssn}, börjar med {self._multi_arguments[0]}:",
                "Det börjar med annat"
            ]
        )
        self.assertEqual(
            len(ssn), 11
            ,
            [
                f"Förväntar att personnumret, {ssn}, har antal tecken:",
                "Det har antal tecken:"
            ]
        )


    @tags("b2")
    def test_create_ssn_ext_menu(self):
        """
        Testar att anropa menyval b2 via main funktionen i main.py, med "k".
        Använder följande som input:
        {arguments}
        Förväntar att följande sträng finns med i utskriften:
        {correct}
        Fick följande:  
        {student}
        """
        self._multi_arguments = ["b2", "991231", "k", "", "q"]
        self.norepr = True

        with patch("builtins.input", side_effect=self._multi_arguments):
            with patch("sys.stdout", new=StringIO()) as fake_out:
                main.main()
                str_data = fake_out.getvalue()
        ssn = re.search(r"(991231-\d+)", str_data).group(1)
        self.assertFalse(
            int(ssn[-2]) % 2 == 1,
            [
                f"Förväntar att tredje siffran i {ssn} är udda",
                "Den var jämn"
            ]
        )
        self.assertFalse(
            not ssn.startswith("991231"),
            [
                f"Förväntar att personnumret, {ssn}, börjar med {self._multi_arguments[0]}:",
                "Det börjar med annat"
            ]
        )
        self.assertEqual(
            len(ssn), 11
            ,
            [
                f"Förväntar att personnumret, {ssn}, har antal tecken:",
                "Det har antal tecken:"
            ]
        )
        

    @tags("b3", "marvin2")
    def test_find_all_indexes_menu(self):
        """
        Testar att anropa menyval b3 i main.py.
        Använder följande som input:
        {arguments}
        Förväntar att följande finns med i utskriften:
        {correct}
        Fick följande:
        {student}
        """
        self.norepr = True
        self._multi_arguments = [
            "b3",
            "There's unlimited juice? This party is gonna be off the hook. Oh, I'm sorry, I forgot... your wife is dead!.",
            "is",
            "",
            "q"
        ]

        self.check_print_contain(
            self._multi_arguments,
            ["27,36,99"],
            main.main
        )



    @tags("b3", "marvin2")
    def test_find_all_indexes_includes_last(self):
        """
        Testar att anropa funktionen find_all_indexes i marvin2.py. Där sista karaktären också ska hittas.
        Använder följande som input:
        {arguments}
        Förväntar att följande returneras:
        {correct}
        Fick följande:
        {student}
        """
        self._multi_arguments = [
            "There's unlimited juice? This party is gonna be off the hook. Oh, I'm sorry, I forgot... your wife is dead!.",
            "."
        ]

        self.assertEqual(
                marvin2.find_all_indexes(
                *self._multi_arguments
            ),
            "60,85,86,87,107"
        )



    @tags("b3", "marvin2")
    def test_find_all_indexes_missing(self):
        """
        Testar att anropa funktionen find_all_indexes i marvin2.py. Där söksträngen saknas.
        Använder följande som input:
        {arguments}
        Förväntar att följande returneras:
        {correct}
        Fick följande:
        {student}
        """
        self._multi_arguments = [
            "There's unlimited juice? This party is gonna be off the hook. Oh, I'm sorry, I forgot... your wife is dead!.",
            "x"
        ]

        self.assertEqual(
                marvin2.find_all_indexes(
                *self._multi_arguments
            ),
            ""
        )



    # @tags("b3", "marvin2")
    # def test_find_all_indexes_check_use_try_except(self):
    #     """
    #     Testar att funktionen find_all_indexes innehåller try och except konstruktionen.
    #     Förväntar att följande rad finns i din funktion:
    #     {correct}
    #     Din funktion innehåller följande:
    #     {student}
    #     """
    #     self.norepr = True
    #     self.assertIn("try:", inspect.getsource(marvin2.find_all_indexes))
    #     self.assertIn("except ValueError:", inspect.getsource(marvin2.find_all_indexes))


if __name__ == '__main__':
    runner = TextTestRunner(resultclass=ExamTestResult, verbosity=2)
    unittest.main(testRunner=runner, exit=False)
