#!/usr/bin/env python3
"""
An autogenerated testfile for python.
"""

import os
import re
import sys
import unittest
from io import StringIO
from unittest import TextTestRunner
from unittest.mock import patch

from tester import (ExamTestCase, ExamTestResult, import_module,
                    setup_and_get_repo_path, tags)

FILE_DIR = os.path.dirname(os.path.realpath(__file__))
REPO_PATH = setup_and_get_repo_path(FILE_DIR)


class Test4Marvin2Structure(ExamTestCase):
    """
    Each assignment has 1 testcase with multiple asserts.
    The different asserts https://docs.python.org/3.6/library/unittest.html#test-cases
    """

    link_to_assignment = "https://bth-python.github.io/website/laromaterial/uppgift/marvin2/"

    @tags("struct")
    def test_file_main_py_exist(self):
        """
        Testerna hittar inte filen 'main.py'.
        """
        self.assertModule("main", REPO_PATH)



    @tags("struct")
    def test_file_marvin1_py_exist(self):
        """
        Testerna hittar inte filen 'marvin1.py'.
        """
        self.assertModule("marvin1", REPO_PATH)

    @tags("struct")
    def test_file_marvin2_py_exist(self):
        """
        Testerna hittar inte filen 'marvin2.py'.
        """
        self.assertModule("marvin2", REPO_PATH)



    @tags("struct")
    def test_file_main_has_main_function(self):
        """
        Testerna hittar inte funktionen 'main' i filen 'main.py'.
        """
        main = import_module(REPO_PATH, 'main')
        self.assertAttribute(main, "main")




if __name__ == '__main__':
    runner = TextTestRunner(resultclass=ExamTestResult, verbosity=2)
    unittest.main(testRunner=runner, exit=False)
