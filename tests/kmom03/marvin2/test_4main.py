#!/usr/bin/env python3
"""
An autogenerated testfile for python.
"""

import inspect
import os
import re
import sys
import unittest
from io import StringIO
from unittest import TextTestRunner
from unittest.mock import patch

from tester import (ExamTestCase, ExamTestResult, import_module,
                    setup_and_get_repo_path, tags)

FILE_DIR = os.path.dirname(os.path.realpath(__file__))
REPO_PATH = setup_and_get_repo_path(FILE_DIR)

# Path to file and basename of the file to import
main = import_module(REPO_PATH, 'main')
marvin2 = import_module(REPO_PATH, 'marvin2')

class Test2Marvin2NewMenus(ExamTestCase):
    """
    Each assignment has 1 testcase with multiple asserts.
    The different asserts https://docs.python.org/3.6/library/unittest.html#test-cases
    """

    def check_print_contain(self, inp, correct, func):
        """
        One function for testing print input functions.
        """
        with patch("builtins.input", side_effect=inp):
            with patch("sys.stdout", new=StringIO()) as fake_out:
                func()
                str_data = fake_out.getvalue()
                for val in correct:
                    self.assertIn(val, str_data)



    @tags("7", "marvin2")
    def test_create_ssn_func(self):
        """
        Testar att anropa menyval 7 via main funktionen i main.py.
        Använder följande som input:
        {arguments}
        Förväntar att ett giltigt personnummer har rätt struktur:
        {correct}
        Det har inte strukturen, ÅÅMMDD-NNNN:
        {student}
        """
        self.norepr = True
        birthdate = "030123"
        self._multi_arguments = ["7", birthdate, "", "q"]

        with patch("builtins.input", side_effect=self._multi_arguments):
            with patch("sys.stdout", new=StringIO()) as fake_out:
                main.main()
                str_data = fake_out.getvalue()

        pattern = r"[^\d](030123-\d{4})[^\d]"
        self.fail_msg.student_answer = str_data
        self.fail_msg.correct_answer = repr(f"{birthdate}-NNNN")
        if re.search(pattern, str_data) is None:
            raise AssertionError
        ssn = re.search(pattern, str_data)[1]

        self._multi_arguments = ["5", ssn, "", "q"]
        with patch("builtins.input", side_effect=self._multi_arguments):
            with patch("sys.stdout", new=StringIO()) as fake_out:
                main.main()
                str_data = fake_out.getvalue()
            self.assertIn("Valid", str_data, msg=[
                "Använder funktionen 'validate_ssn()' för att validera det genererade personnummret:",
                "Personnummret var inte giltigt:"
            ])


    @tags("8", "marvin2")
    def test_randomize_string_menu(self):
        """
        Testar att anropa menyval 8 via main funktionen i main.py.
        Använder följande som input:
        {arguments}
        Förväntar att följande sträng finns med i utskrift fast med bokstäverna i annan ordning:
        {correct}
        Fick följande:
        {student}
        """
        string = "Borde inte bli samma igen"
        self._multi_arguments = ["8", string, "", "q"]

        with patch("builtins.input", side_effect=self._multi_arguments):
            with patch("sys.stdout", new=StringIO()) as fake_out:
                main.main()
                str_data = fake_out.getvalue()

        length = len(string)
        pattern = fr"{string} --> ([{string}]{{{length}}})"

        self.fail_msg.student_answer = str_data
        self.fail_msg.correct_answer = repr(f"{string} --> <en slumpad ordning>")


        try:
            rnd_str = re.search(pattern, str_data)[1]
        except TypeError:
            raise AssertionError
        if string == rnd_str or sorted(string) != sorted(rnd_str):
            raise AssertionError




if __name__ == '__main__':
    runner = TextTestRunner(resultclass=ExamTestResult, verbosity=2)
    unittest.main(testRunner=runner, exit=False)
