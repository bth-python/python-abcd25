#!/usr/bin/env python3
"""
An autogenerated testfile for python.
"""

import os
import sys
import unittest
from io import StringIO
from unittest import TextTestRunner
from unittest.mock import patch

from tester import (ExamTestCase, ExamTestResult, import_module,
                    setup_and_get_repo_path, tags)

FILE_DIR = os.path.dirname(os.path.realpath(__file__))
REPO_PATH = setup_and_get_repo_path(FILE_DIR)

# Path to file and basename of the file to import
main = import_module(REPO_PATH, 'main')


class Test2Emission2Main(ExamTestCase):
    """
    Each assignment has 1 testcase with multiple asserts.
    The different asserts https://docs.python.org/3.6/library/unittest.html#test-cases
    """

    link_to_assignment = "https://bth-python.github.io/website/laromaterial/uppgift/emissions/"


    def check_print_contain(self, inp, correct=None):
        """
        One function for testing print input functions.
        """
        with patch("builtins.input", side_effect=inp):
            with patch("sys.stdout", new=StringIO()) as fake_out:
                main.main()
                str_data = fake_out.getvalue()
                if correct:
                    for val in correct:
                        self.assertIn(val, str_data)
                return str_data

    def check_print_not_contain(self, inp, correct):
        """
        One function for testing print input functions.
        """
        with patch("builtins.input", side_effect=inp):
            with patch("sys.stdout", new=StringIO()) as fake_out:
                main.main()
                for val in correct:
                    str_data = fake_out.getvalue()
                    self.assertNotIn(val, str_data, ["Förväntar att följande inte finns med i utskrifter:", "Fick med följande:"])




    @tags("1")
    def test_total(self):
        """
        Testar att anropa menyval 1.
        Använder följande som input:
        {arguments}
        Förväntar att följande finns med i utskrift:
        {correct}
        Fick följande:
        {student}
        """
        self.norepr = True
        self._multi_arguments = [
            "1", "", "q"
        ]

        correct = ["Alice (101): 70 kg CO2", "Bob (102): 40 kg CO2"]
        self.check_print_contain(self._multi_arguments, correct)


    @tags("2")
    def test_greenest(self):
        """
        Testar att anropa menyval 2.
        Använder följande som input:
        {arguments}
        Förväntar att följande finns med i utskrift:
        {correct}
        Fick följande:
        {student}
        """
        self.norepr = True
        self._multi_arguments = [
            "2", "", "q"
        ]

        correct = ["Bob (102): 40 kg CO2"]
        self.check_print_contain(self._multi_arguments, correct)



    @tags("3")
    def test_category(self):
        """
        Testar att anropa menyval 3.
        Använder följande som input:
        {arguments}
        Förväntar att följande finns med i utskrift:
        {correct}
        Fick följande:
        {student}
        """
        self.norepr = True
        self._multi_arguments = [
            "3", "", "q"
        ]

        correct = ["transport: 70 kg CO2", "food: 63 kg CO2", "energy: 90 kg CO2", "waste: 5 kg CO2"]
        self.check_print_contain(self._multi_arguments, correct)



    @tags("4")
    def test_per_category(self):
        """
        Testar att anropa menyval 4.
        Använder följande som input:
        {arguments}
        Förväntar att följande värden finns med i utskrift och i ordningen som de ligger i listan:
        {correct}
        Fick följande:
        {student}
        """
        self.norepr = True
        self._multi_arguments = [
            "4", "transport", "", "q"
        ]

        correct = ["1. Dana (104): 40 kg CO2 från transport", "2. Alice (101): 15 kg CO2 från transport", "3. Charlie (103): 10 kg CO2 från transport", "4. Bob (102): 5 kg CO2 från transport"]
        data = self.check_print_contain(self._multi_arguments)
        self.assertOrder(correct, data)


    @tags("4", "missing")
    def test_per_category_missing_category(self):
        """
        Testar att anropa menyval 4 med en kategori som inte finns.
        Använder följande som input:
        {arguments}
        Förväntar att följande värden finns med i utskrift och i ordningen som de ligger i listan:
        {correct}
        Fick följande:
        {student}
        """
        self.norepr = True
        self._multi_arguments = [
            "4", "missing", "", "q"
        ]

        correct = ["1. Alice (101): 0 kg CO2", "2. Bob (102): 0 kg CO2", "3. Charlie (103): 0 kg CO2", "4. Dana (104): 0 kg CO2"]
        data = self.check_print_contain(self._multi_arguments)
        self.assertOrder(correct, data)



    @tags("5")
    def test_add(self):
        """
        Testar att anropa menyval 5 följt av menyval 1.
        Använder följande som input:
        {arguments}
        Förväntar att följande finns med i utskrift:
        {correct}
        Fick följande:
        {student}
        """
        self.norepr = True
        self._multi_arguments = [
            "5", "Eve", "105", "food", "12", "", "1", "", "q" 
        ]

        correct = ["Data uppdaterad för Eve (105)", "Eve (105)", "12 kg CO2"]
        self.check_print_contain(self._multi_arguments, correct)


    @tags("5", "4", "add")
    def test_add(self):
        """
        Testar att anropa menyval 5 med en student följt av menyval 4 där den nya studenten saknar kategorin.
        Använder följande som input:
        {arguments}
        Förväntar att följande finns med i utskrift:
        {correct}
        Fick följande:
        {student}
        """
        self.norepr = True
        self._multi_arguments = [
            "5", "Chorven", "105", "hobby", "50", "", "4", "energy", "", "q" 
        ]

        correct = ["Data uppdaterad för Chorven (105)", "Chorven (105)", "0 kg CO2 från energy"]
        self.check_print_contain(self._multi_arguments, correct)



    @tags("6", "2")
    def test_remove(self):
        """
        Testar att anropa menyval 6 följt av menyval 2. Nu borde Charlie har lägst utsläpp.
        Använder följande som input:
        {arguments}
        Förväntar att följande finns med i utskrift:
        {correct}
        Fick följande:
        {student}
        """
        self.norepr = True
        self._multi_arguments = [
            "6", "Bob", "102", "", "2", "", "q" 
        ]

        correct = ["Bob (102) har tagits bort", "Charlie (103): 53 kg CO2"]
        self.check_print_contain(self._multi_arguments, correct)


    @tags("6", "missing")
    def test_remove_missing_id(self):
        """
        Testar att anropa menyval 6 med en student vars ID inte finns.
        Använder följande som input:
        {arguments}
        Förväntar att följande finns med i utskrift:
        {correct}
        Fick följande:
        {student}
        """
        self.norepr = True
        self._multi_arguments = [
            "6", "Alice", "107", "", "q" 
        ]

        correct = ["Student Alice (107) hittades inte"]
        self.check_print_contain(self._multi_arguments, correct)

    @tags("6", "missing")
    def test_remove_missing_name(self):
        """
        Testar att anropa menyval 6 med en student vars namn inte finns.
        Använder följande som input:
        {arguments}
        Förväntar att följande finns med i utskrift:
        {correct}
        Fick följande:
        {student}
        """
        self.norepr = True
        self._multi_arguments = [
            "6", "Buster", "102", "", "q" 
        ]

        correct = ["Student Buster (102) hittades inte"]
        self.check_print_contain(self._multi_arguments, correct)


    @tags("2", "empty")
    def test_empty_list(self):
        """
        Testar att anropa menyval 2 efter att tagit bort alla studenter först.
        Använder följande som input:
        {arguments}
        Förväntar att följande finns med i utskrift:
        {correct}
        Fick följande:
        {student}
        """
        self.norepr = True
        self._multi_arguments = [
            "6", "Alice", "101", "",
            "6", "Bob", "102", "",
            "6", "Charlie", "103", "",
            "6", "Dana", "104", "",
            "2", "",  # Grönaste student på tom lista
            "q"
        ]

        correct = ["Ingen studentdata tillgänglig."]
        self.check_print_contain(self._multi_arguments, correct)



if __name__ == '__main__':
    runner = TextTestRunner(resultclass=ExamTestResult, verbosity=2)
    unittest.main(testRunner=runner, exit=False)
