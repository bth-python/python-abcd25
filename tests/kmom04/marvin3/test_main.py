#!/usr/bin/env python3
"""
An autogenerated testfile for python.
"""

import os
import sys
import unittest
from io import StringIO
from unittest import TextTestRunner
from unittest.mock import patch

from tester import (ExamTestCase, ExamTestResult, import_module,
                    setup_and_get_repo_path, tags)

FILE_DIR = os.path.dirname(os.path.realpath(__file__))
REPO_PATH = setup_and_get_repo_path(FILE_DIR)

# Path to file and basename of the file to import
main = import_module(REPO_PATH, 'main')


class Test3Marvin3Main(ExamTestCase):
    """
    Each assignment has 1 testcase with multiple asserts.
    The different asserts https://docs.python.org/3.6/library/unittest.html#test-cases
    """

    link_to_assignment = "https://bth-python.github.io/website/laromaterial/uppgift/marvin3/"

    PICKUP = ["inv pick car", "", "inv pick house", ""]


    def check_print_contain(self, inp, correct):
        """
        One function for testing print input functions.
        """
        with patch("builtins.input", side_effect=inp):
            with patch("sys.stdout", new=StringIO()) as fake_out:
                main.main()
                for val in correct:
                    str_data = fake_out.getvalue()
                    self.assertIn(val, str_data)


    def check_print_not_contain(self, inp, correct):
        """
        One function for testing print input functions.
        """
        with patch("builtins.input", side_effect=inp):
            with patch("sys.stdout", new=StringIO()) as fake_out:
                main.main()
                for val in correct:
                    str_data = fake_out.getvalue()
                    self.assertNotIn(val, str_data, ["Förväntar att följande inte finns med i utskrifter:", "Fick med följande:"])



    @tags("menu", "inv")
    def test_inv_command_empty(self):
        """
        Testar att anropa 'inv kommandot' i main.py.
        Använder följande som input:
        {arguments}
        Förväntar att följande finns med i utskrift:
        {correct}
        Fick följande:
        {student}
        """
        self.norepr = True
        self._multi_arguments = ["inv", "", "q"]

        self.check_print_contain(self._multi_arguments, ["0"])



    @tags("menu", "pick")
    def test_pick_command(self):
        """
        Testar att anropa 'inv pick' med och utan index.
        Använder följande som input:
        {arguments}
        Förväntar att följande finns med i utskrift:
        {correct}
        Fick följande:
        {student}
        """
        self.norepr = True
        self._multi_arguments = Test3Marvin3Main.PICKUP + [
            "inv pick bike 1", "", "q"
        ]

        correct = ["car", "", "house", "bike", "1"]
        self.check_print_contain(self._multi_arguments, correct)
        self.check_print_not_contain(self._multi_arguments, ["Error"])



    @tags("menu", "drop")
    def test_pick_and_drop(self):
        """
        Testar både 'inv pick' och 'inv drop' kommandon.
        Använder följande som input:
        {arguments}
        Förväntar att följande finns med i utskrift:
        {correct}
        Fick följande:
        {student}
        """
        self.norepr = True
        self._multi_arguments = Test3Marvin3Main.PICKUP + [
            "inv drop car", "", "q"
        ]

        self.check_print_contain(self._multi_arguments, ["car"])
        self.check_print_not_contain(self._multi_arguments, ["Error"])



    @tags("menu", "drop")
    def test_pick_and_drop_error(self):
        """
        Testar 'inv drop' på ett icke existerande värde.
        Använder följande som input:
        {arguments}
        Förväntar att följande finns med i utskrift:
        {correct}
        Fick följande:
        {student}
        """
        self.norepr = True
        self._multi_arguments = Test3Marvin3Main.PICKUP + [
            "inv drop bike", "", "q"
        ]

        self.check_print_contain(self._multi_arguments, ["bike"])
        self.check_print_contain(self._multi_arguments, ["Error"])



    @tags("menu", "swap")
    def test_pick_and_swap(self):
        """
        Testar 'inv pick och 'inv swap' kommandot
        Använder följande som input:
        {arguments}
        Förväntar att följande finns med i utskrift:
        {correct}
        Fick följande:
        {student}
        """
        self.norepr = True
        self._multi_arguments = Test3Marvin3Main.PICKUP + [
            "inv swap car house", "", "q"
        ]

        self.check_print_contain(self._multi_arguments, ["house", "car"])
        self.check_print_not_contain(self._multi_arguments, ["Error"])



    @tags("menu", "swap")
    def test_pick_and_swap_error(self):
        """
        Testar pick och swap kommandot som ska ge error.
        Använder följande som input:
        {arguments}
        Förväntar att följande finns med i utskrift:
        {correct}
        Fick följande:
        {student}
        """
        self.norepr = True
        self._multi_arguments = Test3Marvin3Main.PICKUP + [
            "inv swap bike house", "", "q"
        ]

        self.check_print_contain(self._multi_arguments, ["bike"])
        self.check_print_contain(self._multi_arguments, ["Error"])





if __name__ == '__main__':
    runner = TextTestRunner(resultclass=ExamTestResult, verbosity=2)
    unittest.main(testRunner=runner, exit=False)
